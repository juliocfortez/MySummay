@{
    @model MyOwnSummary_WEB.Models.NoteViewDto
    int i = 1;
}

<table class="table caption-top">
    <thead>
        <tr>
            <th colspan="5">
                <div class="row">
                    <div class="col-3">
                        <h3>List of notes</h3>
                    </div>
                    
                    <div class="col-3">
                            <div class="col-4">
                                <label for="categories" class="form-label">Categories</label>
                            </div>
                            <div class="col-8">
                            <form method="get" action="@Url.Action("Notes", "Home")">
                                <select class="form-select" id="categories" aria-label="Select example" onchange="Filters()">
                                    <option selected value="0">All</option>
                                    @foreach (var item in Model.Categories)
                                    {
                                        <option value=@item.Id.ToString()>@item.Name</option>
                                    }
                                </select>
                            </form>
                            </div>    
                    </div>
                    
                    <div class="col-3 text-md-right">
                        <div class="col-4">
                            <label for="languages" class="form-label">Languages</label>
                        </div>
                        <div class="col-8">
                            <form method="get" action="@Url.Action("Notes", "Home")">
                                <select class="form-select" id="languages" aria-label="Select example" onchange="Filters()">
                                    <option selected value="0">All</option>
                                    @foreach (var item in Model.Languages)
                                    {
                                        <option value=@item.Id.ToString()>@item.Name</option>
                                    }
                            </select>
                            </form>
                        </div>
                    </div>
                    
                    <div class="col-3 text-md-right">
                        <div class="row">
                            <div class="col-12 col-lg-4 col-md-6 col-xl-4 col-sm-12 mb-1">
                                <form method="post" action="@Url.Action("Export", "Export")" id="exportForm">
                                    <input type="hidden" id="notesJson" name="notesJson" />
                                    <button type="submit" class="btn btn-success" style="float:right" onclick="prepareExport()">Export Notes</button>
                                </form>
                            </div>
                            <div class="col-12 col-lg-4 col-md-6 col-xl-4 col-sm-12 mb-1">
                                <a asp-controller="Note" asp-action="Create" class="btn btn-primary" style="float:right">New Note</a>
                            </div>
                            <div class="col-12 col-lg-4 col-md-6 col-xl-4 col-sm-12 mb-1">
                                <a asp-controller="Note" asp-action="Practice" class="btn btn-info" style="float:right">Practice</a>
                            </div>
                        </div>
                    </div>
                </div>
            </th>
        </tr>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Source Text</th>
            <th scope="col">Translate</th>
            <th scope="col">Pronunciation</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    <tbody id="notesTableBody">
        @foreach (var item in Model.Notes)
        {
            <tr id="note-row-@item.Id">
                <th scope="row">@i</th>
                <td>@item.SourceText</td>
                <td>@item.Translate</td>
                <td>@item.Pronunciation</td>
                <td><a asp-controller="Note" asp-action="Update" asp-route-noteId="@item.Id" class="btn btn-outline-warning m-2">Update</a>
                    <a class="btn btn-outline-danger" onclick="DeleteNote(@item.Id)">Delete</a>
                </td>
            </tr>
            i = i +1;
        }
    </tbody>
</table>

@section Scripts {
    <script>
        var notes = @Html.Raw(Json.Serialize(Model.Notes));
        var currentNotes = @Html.Raw(Json.Serialize(Model.Notes));;
        function prepareExport() {
            document.getElementById('notesJson').value = JSON.stringify(currentNotes);
        }

        function Filters() {
            var languageSelected = document.getElementById('languages').value;
            var categorySelected = document.getElementById('categories').value;
            var filteredNotes = notes.filter(note => (note.languageId == languageSelected || languageSelected == "0") && (note.categoryId == categorySelected || categorySelected == "0"));
            currentNotes = filteredNotes;
            var tableBody = document.getElementById('notesTableBody');
            tableBody.innerHTML = '';
            var i = 1;
            filteredNotes.forEach(note => {
                var row = '<tr id="note-row-'+note.id+'">' +
                        '<th scope="row">' + i + '</th>' +
                        '<td>' + note.sourceText + '</td>' +
                        '<td>' + note.translate + '</td>' +
                        '<td>' + note.pronunciation + '</td>' +
                        '<td>' +
                        '<a class="btn btn-outline-warning m-2" href="/Note/Update?noteId='+note.id+'">Update</a>' +
                        '<a class="btn btn-outline-danger" onclick="DeleteNote('+note.id+')">Delete</a>' +
                        '</td>' +
                        '</tr>';
                    tableBody.insertAdjacentHTML('beforeend', row);
                    i++;
            });
        }

        function DeleteNote(noteId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    var rowToDelete = document.getElementById('note-row-' + noteId);
                    // Perform the deletion by calling the Delete action in your controller
                    $.ajax({
                        url: '/Note/Delete', // Call the Delete action in your Note controller
                        type: 'POST', // POST because we're triggering an action method, not a direct API call
                        data: { noteId: noteId }, // Pass the noteId as data
                        success: function (result) {

                            removeNoteFromModel(noteId);
                            // Renumber all rows below the deleted row
                            renumberRows(rowToDelete);

                            // If successful, remove the note row from the table
                            rowToDelete.remove();

                            
                            // Display success message
                            Swal.fire(
                                'Deleted!',
                                'Your note has been deleted.',
                                'success'
                            );
                        },
                        error: function (xhr, status, error) {
                            // If an error occurs, display an error message
                            Swal.fire(
                                'Error!',
                                'An error occurred while trying to delete the note: ' + xhr.statusText,
                                'error'
                            );
                        }
                    });
                }
            });
        }

        function removeNoteFromModel(noteId) {
            var index = notes.findIndex(note => note.id == noteId);
            if (index !== -1) {
                notes.splice(index, 1);
            }
        }

        function renumberRows(startingRow) {
            var rows = document.querySelectorAll('#notesTableBody tr');
            var startRenumbering = false;
            var rowNumber = 1; // Start numbering from 1
            rows.forEach((row) => {
                
                // Start renumbering after the deleted row
                if (row == startingRow) {
                    startRenumbering = true;
                    return; // Skip the deleted row itself
                }
                
                if (startRenumbering) {
                    var numberCell = row.querySelector('th');
                    if (numberCell) {
                        numberCell.textContent = rowNumber; // Set the new number
                    }
                }

                rowNumber++
            });
        }



    </script>
}
